@page "/list/{name}/{vname}"

<header class="myheader">
    <p>
        <div class="graph">
            <span style="position:absolute;z-index:10;color:white;">挑戦率: @Util.GetTryRate()% (@Util.TryChecks.Count(c => c)/@Util.TryChecks.Count())</span>
            <span class="bar" style="width: @Util.GetTryRate()%;"></span>
        </div>
        <div class="graph">
            <span style="position:absolute;z-index:10;color:white;">正解率: @Util.GetCorrectRate()% (@Util.CorrectChecks.Count(c => c)/@Util.TryChecks.Count(c => c))</span>
            <span class="bar" style="background:Blue;width: @Util.GetCorrectRate()%;"></span>
        </div>
    </p>
</header>

<div class="mycontent">
    <h1>@Util.ManifestName</h1>

    <table>
        <tr>
            <th>[Name]</th>
            <th>[Try]</th>
            <th>[Correct]</th>
        </tr>
        @for (int i = 0; i < Util.Names.Count; i++)
        {
            int i0 = i;
            string t = "try" + i.ToString();
            string c = "correct" + i.ToString();
            <tr>
                <td>@Util.Names[i]</td>
                <td>
                    <button type="button" class="@("btn "+(Util.TryChecks[i0]?"btn-dark":"btn-light"))" id="@t"
                            onclick="@(()=>updateTry(i0))">
                        @(Util.TryChecks[i0] ? "挑戦済" : "未挑戦")
                    </button>
                </td>
                <td>
                    <button type="button" class="@("btn "+(Util.CorrectChecks[i0]?"btn-dark":"btn-light"))" id="@c"
                            onclick="@(()=>updateCurrent(i0))" disabled="@(!Util.TryChecks[i0])">
                        @(Util.CorrectChecks[i0] ? "正解済" : "未正解")
                    </button>
                </td>
            </tr>
        }

    </table>
    Import: <input type="file" onchange="handleFileSelect(this.files);" />
    <button type="button" class="btn btn-primary" onclick="@export">Export</button>
    <button type="button" class="btn btn-primary" onclick="@clear">Clear</button>


</div>

@functions {
    [Parameter]
    private string Name { get; set; } = "";
    [Parameter]
    private string VName { get; set; } = "";

    private bool tryFlag;

    protected async override Task OnInitAsync()
    {
        Util.PageRefer = this;
        base.OnInit();
        await Util.SetResource(Name, VName);
    }
    private async void updateCurrent(int index)
    {
        Util.CorrectChecks[index] = !Util.CorrectChecks[index];
        await Util.Save();
    }
    private async void updateTry(int index)
    {
        Util.TryChecks[index] = !Util.TryChecks[index];
        await Util.Save();
    }
    private void clear()
    {
        Util.uriHelper.NavigateTo($"/clearconf/{Name}/{VName}");
    }
    private void export()
    {
        Util.uriHelper.NavigateTo($"/export/{Name}/{VName}");
    }
    public void StateHasChangedProxy()
    {
        Console.WriteLine("this.StateHasChanged();");
        this.StateHasChanged();
    }
}
